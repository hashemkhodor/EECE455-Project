from flask import Flask, render_template, requestdef encrypt_affine_cipher(message, a, b, operation):    # Implementation of Affine Cipher encryption or decryption    passdef encrypt_mono_alphabetic_cipher(message, key, operation):    # Implementation of Mono-Alphabetic Cipher encryption or decryption    passdef encrypt_vigenere_cipher(message, key, operation):    # Implementation of Vigenere Cipher encryption or decryption    passdef encrypt_playfair_cipher(message, key, operation):    # Implementation of Playfair Cipher encryption or decryption    passdef encrypt_hill_cipher(message, key_matrix, operation):    # Implementation of Hill Cipher encryption or decryption    passdef find_modular_inverse(a, m):    # Implementation of Extended Euclidean Algorithm    passapp = Flask(__name__)@app.route('/')def index():    # This function will render the 'index.html' template    # and pass some data to be displayed in the HTML.    return render_template('page.html')@app.route('/encrypt', methods=['GET', 'POST'])def encrypt():    if request.method == 'POST':        encryption_type = request.form['encryption_type']        message = request.form['message']        operation = request.form['operation']        if encryption_type == 'affine_cipher':            a = int(request.form['a'])            b = int(request.form['b'])            result = encrypt_affine_cipher(message, a, b, operation)        elif encryption_type == 'mono_alphabetic_cipher':            key = request.form['key']            result = encrypt_mono_alphabetic_cipher(message, key, operation)        elif encryption_type == 'vigenere_cipher':            key = request.form['vigenereKey']            result = encrypt_vigenere_cipher(message, key, operation)        elif encryption_type == 'playfair_cipher':            key = request.form['playfairKey']            result = encrypt_playfair_cipher(message, key, operation)        elif encryption_type == 'hill_cipher':            matrix_size = int(request.form['matrixSize'])            key_matrix = [list(map(int, row.split())) for row in request.form['hillMatrix'].splitlines()]            result = encrypt_hill_cipher(message, key_matrix, operation)        elif encryption_type == 'extended_euclidean_algorithm':            a = int(request.form['integer'])            m = int(request.form['modulus'])            result = find_modular_inverse(a, m)            return render_template('result.html', result=f'Modular Inverse of {a} (mod {m}): {result}')        else:            result = 'Invalid encryption type'        return render_template('result.html', result=f'Result: {result}')    return render_template('page.html')if __name__ == '__main__':    app.run(debug=True)